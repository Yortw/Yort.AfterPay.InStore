### YamlMime:ManagedReference
items:
- uid: Yort.AfterPay.InStore.IAfterPayClient
  commentId: T:Yort.AfterPay.InStore.IAfterPayClient
  id: IAfterPayClient
  parent: Yort.AfterPay.InStore
  children:
  - Yort.AfterPay.InStore.IAfterPayClient.CreateOrder(Yort.AfterPay.InStore.AfterPayCreateOrderRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  - Yort.AfterPay.InStore.IAfterPayClient.Ping
  - Yort.AfterPay.InStore.IAfterPayClient.PreapprovalEnquiry(Yort.AfterPay.InStore.AfterPayPreapprovalRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  - Yort.AfterPay.InStore.IAfterPayClient.RefundOrder(Yort.AfterPay.InStore.AfterPayCreateRefundRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  - Yort.AfterPay.InStore.IAfterPayClient.RegisterDevice(Yort.AfterPay.InStore.AfterPayDeviceRegistrationRequest)
  - Yort.AfterPay.InStore.IAfterPayClient.ReverseOrder(Yort.AfterPay.InStore.AfterPayReverseOrderRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  - Yort.AfterPay.InStore.IAfterPayClient.ReverseRefund(Yort.AfterPay.InStore.AfterPayReverseRefundRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  - Yort.AfterPay.InStore.IAfterPayClient.SendInvite(Yort.AfterPay.InStore.AfterPayInviteRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  langs:
  - csharp
  - vb
  name: IAfterPayClient
  nameWithType: IAfterPayClient
  fullName: Yort.AfterPay.InStore.IAfterPayClient
  type: Interface
  source:
    id: IAfterPayClient
    path: ''
    startLine: 2169
  assemblies:
  - cs.temp.dll
  namespace: Yort.AfterPay.InStore
  summary: "\nAn interface for <xref href=\"Yort.AfterPay.InStore.AfterPayClient\" data-throw-if-not-resolved=\"false\"></xref> to allow mocking the client for test purposes. \n"
  example: []
  syntax:
    content: public interface IAfterPayClient
    content.vb: Public Interface IAfterPayClient
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Yort.AfterPay.InStore.IAfterPayClient.RegisterDevice(Yort.AfterPay.InStore.AfterPayDeviceRegistrationRequest)
  commentId: M:Yort.AfterPay.InStore.IAfterPayClient.RegisterDevice(Yort.AfterPay.InStore.AfterPayDeviceRegistrationRequest)
  id: RegisterDevice(Yort.AfterPay.InStore.AfterPayDeviceRegistrationRequest)
  parent: Yort.AfterPay.InStore.IAfterPayClient
  langs:
  - csharp
  - vb
  name: RegisterDevice(AfterPayDeviceRegistrationRequest)
  nameWithType: IAfterPayClient.RegisterDevice(AfterPayDeviceRegistrationRequest)
  fullName: Yort.AfterPay.InStore.IAfterPayClient.RegisterDevice(Yort.AfterPay.InStore.AfterPayDeviceRegistrationRequest)
  type: Method
  source:
    id: RegisterDevice
    path: ''
    startLine: 2178
  assemblies:
  - cs.temp.dll
  namespace: Yort.AfterPay.InStore
  summary: "\nPerforms one time registration of a new point of sale device (API client) with the AfterPay API.\n"
  example: []
  syntax:
    content: Task<AfterPayDeviceRegistration> RegisterDevice(AfterPayDeviceRegistrationRequest request)
    parameters:
    - id: request
      type: Yort.AfterPay.InStore.AfterPayDeviceRegistrationRequest
      description: A <xref href="Yort.AfterPay.InStore.AfterPayDeviceRegistrationRequest" data-throw-if-not-resolved="false"></xref> containing details of the device to register.
    return:
      type: Task{Yort.AfterPay.InStore.AfterPayDeviceRegistration}
      description: A <xref href="Yort.AfterPay.InStore.AfterPayDeviceRegistration" data-throw-if-not-resolved="false"></xref> containing details returned by AfterPay for a successful registration.
    content.vb: Function RegisterDevice(request As AfterPayDeviceRegistrationRequest) As Task(Of AfterPayDeviceRegistration)
  overload: Yort.AfterPay.InStore.IAfterPayClient.RegisterDevice*
  exceptions:
  - type: Yort.AfterPay.InStore.AfterPayApiException
    commentId: T:Yort.AfterPay.InStore.AfterPayApiException
    description: Thrown if the request is rejected by the AfterPay API.
- uid: Yort.AfterPay.InStore.IAfterPayClient.Ping
  commentId: M:Yort.AfterPay.InStore.IAfterPayClient.Ping
  id: Ping
  parent: Yort.AfterPay.InStore.IAfterPayClient
  langs:
  - csharp
  - vb
  name: Ping()
  nameWithType: IAfterPayClient.Ping()
  fullName: Yort.AfterPay.InStore.IAfterPayClient.Ping()
  type: Method
  source:
    id: Ping
    path: ''
    startLine: 2183
  assemblies:
  - cs.temp.dll
  namespace: Yort.AfterPay.InStore
  summary: "\nSends a ping request to the AfterPay API to confirm a connection can be made. If no exception is thrown the ping was successful.\n"
  example: []
  syntax:
    content: Task Ping()
    return:
      type: Task
    content.vb: Function Ping As Task
  overload: Yort.AfterPay.InStore.IAfterPayClient.Ping*
- uid: Yort.AfterPay.InStore.IAfterPayClient.SendInvite(Yort.AfterPay.InStore.AfterPayInviteRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  commentId: M:Yort.AfterPay.InStore.IAfterPayClient.SendInvite(Yort.AfterPay.InStore.AfterPayInviteRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  id: SendInvite(Yort.AfterPay.InStore.AfterPayInviteRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  parent: Yort.AfterPay.InStore.IAfterPayClient
  langs:
  - csharp
  - vb
  name: SendInvite(AfterPayInviteRequest, AfterPayCallContext)
  nameWithType: IAfterPayClient.SendInvite(AfterPayInviteRequest, AfterPayCallContext)
  fullName: Yort.AfterPay.InStore.IAfterPayClient.SendInvite(Yort.AfterPay.InStore.AfterPayInviteRequest, Yort.AfterPay.InStore.AfterPayCallContext)
  type: Method
  source:
    id: SendInvite
    path: ''
    startLine: 2190
  assemblies:
  - cs.temp.dll
  namespace: Yort.AfterPay.InStore
  summary: "\nSends an invitational SMS message to a customer&apos;s mobile phone. If no exception is thrown the invite was sent successfully.\n"
  example: []
  syntax:
    content: Task SendInvite(AfterPayInviteRequest request, AfterPayCallContext requestContext)
    parameters:
    - id: request
      type: Yort.AfterPay.InStore.AfterPayInviteRequest
      description: A <xref href="Yort.AfterPay.InStore.AfterPayInviteRequest" data-throw-if-not-resolved="false"></xref> instance containing details of the invite to send.
    - id: requestContext
      type: Yort.AfterPay.InStore.AfterPayCallContext
      description: A <xref href="Yort.AfterPay.InStore.AfterPayCallContext" data-throw-if-not-resolved="false"></xref> instance describing additional information for the request.
    return:
      type: Task
    content.vb: Function SendInvite(request As AfterPayInviteRequest, requestContext As AfterPayCallContext) As Task
  overload: Yort.AfterPay.InStore.IAfterPayClient.SendInvite*
- uid: Yort.AfterPay.InStore.IAfterPayClient.PreapprovalEnquiry(Yort.AfterPay.InStore.AfterPayPreapprovalRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  commentId: M:Yort.AfterPay.InStore.IAfterPayClient.PreapprovalEnquiry(Yort.AfterPay.InStore.AfterPayPreapprovalRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  id: PreapprovalEnquiry(Yort.AfterPay.InStore.AfterPayPreapprovalRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  parent: Yort.AfterPay.InStore.IAfterPayClient
  langs:
  - csharp
  - vb
  name: PreapprovalEnquiry(AfterPayPreapprovalRequest, AfterPayCallContext)
  nameWithType: IAfterPayClient.PreapprovalEnquiry(AfterPayPreapprovalRequest, AfterPayCallContext)
  fullName: Yort.AfterPay.InStore.IAfterPayClient.PreapprovalEnquiry(Yort.AfterPay.InStore.AfterPayPreapprovalRequest, Yort.AfterPay.InStore.AfterPayCallContext)
  type: Method
  source:
    id: PreapprovalEnquiry
    path: ''
    startLine: 2198
  assemblies:
  - cs.temp.dll
  namespace: Yort.AfterPay.InStore
  summary: "\nRequests information about a pre-approval code generated by a customer.\n"
  example: []
  syntax:
    content: Task<AfterPayPreapprovalResponse> PreapprovalEnquiry(AfterPayPreapprovalRequest request, AfterPayCallContext requestContext)
    parameters:
    - id: request
      type: Yort.AfterPay.InStore.AfterPayPreapprovalRequest
      description: A <xref href="Yort.AfterPay.InStore.AfterPayPreapprovalRequest" data-throw-if-not-resolved="false"></xref> containing details of the pre-approval code to enquire about.
    - id: requestContext
      type: Yort.AfterPay.InStore.AfterPayCallContext
      description: A <xref href="Yort.AfterPay.InStore.AfterPayCallContext" data-throw-if-not-resolved="false"></xref> instance containing additional details required to make the request.
    return:
      type: Task{Yort.AfterPay.InStore.AfterPayPreapprovalResponse}
      description: A <xref href="Yort.AfterPay.InStore.AfterPayPreapprovalResponse" data-throw-if-not-resolved="false"></xref> instance containing information about the pre-approval code specified.
    content.vb: Function PreapprovalEnquiry(request As AfterPayPreapprovalRequest, requestContext As AfterPayCallContext) As Task(Of AfterPayPreapprovalResponse)
  overload: Yort.AfterPay.InStore.IAfterPayClient.PreapprovalEnquiry*
- uid: Yort.AfterPay.InStore.IAfterPayClient.CreateOrder(Yort.AfterPay.InStore.AfterPayCreateOrderRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  commentId: M:Yort.AfterPay.InStore.IAfterPayClient.CreateOrder(Yort.AfterPay.InStore.AfterPayCreateOrderRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  id: CreateOrder(Yort.AfterPay.InStore.AfterPayCreateOrderRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  parent: Yort.AfterPay.InStore.IAfterPayClient
  langs:
  - csharp
  - vb
  name: CreateOrder(AfterPayCreateOrderRequest, AfterPayCallContext)
  nameWithType: IAfterPayClient.CreateOrder(AfterPayCreateOrderRequest, AfterPayCallContext)
  fullName: Yort.AfterPay.InStore.IAfterPayClient.CreateOrder(Yort.AfterPay.InStore.AfterPayCreateOrderRequest, Yort.AfterPay.InStore.AfterPayCallContext)
  type: Method
  source:
    id: CreateOrder
    path: ''
    startLine: 2206
  assemblies:
  - cs.temp.dll
  namespace: Yort.AfterPay.InStore
  summary: "\nCreates a new AfterPay order, which is basically a request for payment using a pre-approval code.\n"
  example: []
  syntax:
    content: Task<AfterPayOrder> CreateOrder(AfterPayCreateOrderRequest request, AfterPayCallContext requestContext)
    parameters:
    - id: request
      type: Yort.AfterPay.InStore.AfterPayCreateOrderRequest
      description: A <xref href="Yort.AfterPay.InStore.AfterPayCreateOrderRequest" data-throw-if-not-resolved="false"></xref> containing details of the order to be created.
    - id: requestContext
      type: Yort.AfterPay.InStore.AfterPayCallContext
      description: A <xref href="Yort.AfterPay.InStore.AfterPayCallContext" data-throw-if-not-resolved="false"></xref> instance containing additional details required to make the request.
    return:
      type: Task{Yort.AfterPay.InStore.AfterPayOrder}
      description: An <xref href="Yort.AfterPay.InStore.AfterPayOrder" data-throw-if-not-resolved="false"></xref> created within the AfterPay system.
    content.vb: Function CreateOrder(request As AfterPayCreateOrderRequest, requestContext As AfterPayCallContext) As Task(Of AfterPayOrder)
  overload: Yort.AfterPay.InStore.IAfterPayClient.CreateOrder*
- uid: Yort.AfterPay.InStore.IAfterPayClient.ReverseOrder(Yort.AfterPay.InStore.AfterPayReverseOrderRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  commentId: M:Yort.AfterPay.InStore.IAfterPayClient.ReverseOrder(Yort.AfterPay.InStore.AfterPayReverseOrderRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  id: ReverseOrder(Yort.AfterPay.InStore.AfterPayReverseOrderRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  parent: Yort.AfterPay.InStore.IAfterPayClient
  langs:
  - csharp
  - vb
  name: ReverseOrder(AfterPayReverseOrderRequest, AfterPayCallContext)
  nameWithType: IAfterPayClient.ReverseOrder(AfterPayReverseOrderRequest, AfterPayCallContext)
  fullName: Yort.AfterPay.InStore.IAfterPayClient.ReverseOrder(Yort.AfterPay.InStore.AfterPayReverseOrderRequest, Yort.AfterPay.InStore.AfterPayCallContext)
  type: Method
  source:
    id: ReverseOrder
    path: ''
    startLine: 2219
  assemblies:
  - cs.temp.dll
  namespace: Yort.AfterPay.InStore
  summary: "\nRequests an order previously placed be reversed.\n"
  remarks: "\n<p>This method is intended to ensure an order is cancelled when it&apos;s status is/was unknown at the time the customer was present. It should not be used for refunds, see <xref href=\"Yort.AfterPay.InStore.IAfterPayClient.RefundOrder(Yort.AfterPay.InStore.AfterPayCreateRefundRequest%2cYort.AfterPay.InStore.AfterPayCallContext)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: Task<AfterPayOrderReversal> ReverseOrder(AfterPayReverseOrderRequest request, AfterPayCallContext requestContext)
    parameters:
    - id: request
      type: Yort.AfterPay.InStore.AfterPayReverseOrderRequest
      description: A <xref href="Yort.AfterPay.InStore.AfterPayReverseOrderRequest" data-throw-if-not-resolved="false"></xref> containing details of the order to be reversed.
    - id: requestContext
      type: Yort.AfterPay.InStore.AfterPayCallContext
      description: A <xref href="Yort.AfterPay.InStore.AfterPayCallContext" data-throw-if-not-resolved="false"></xref> instance containing additional details required to make the request.
    return:
      type: Task{Yort.AfterPay.InStore.AfterPayOrderReversal}
      description: An <xref href="Yort.AfterPay.InStore.AfterPayOrderReversal" data-throw-if-not-resolved="false"></xref> containing details of the reversed order within the AfterPay system.
    content.vb: Function ReverseOrder(request As AfterPayReverseOrderRequest, requestContext As AfterPayCallContext) As Task(Of AfterPayOrderReversal)
  overload: Yort.AfterPay.InStore.IAfterPayClient.ReverseOrder*
  exceptions:
  - type: Yort.AfterPay.InStore.AfterPayApiException
    commentId: T:Yort.AfterPay.InStore.AfterPayApiException
    description: Thrown if the request is rejected by the AfterPay API.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or <code data-dev-comment-type="paramref" class="paramref">requestContext</code> is null.
- uid: Yort.AfterPay.InStore.IAfterPayClient.RefundOrder(Yort.AfterPay.InStore.AfterPayCreateRefundRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  commentId: M:Yort.AfterPay.InStore.IAfterPayClient.RefundOrder(Yort.AfterPay.InStore.AfterPayCreateRefundRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  id: RefundOrder(Yort.AfterPay.InStore.AfterPayCreateRefundRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  parent: Yort.AfterPay.InStore.IAfterPayClient
  langs:
  - csharp
  - vb
  name: RefundOrder(AfterPayCreateRefundRequest, AfterPayCallContext)
  nameWithType: IAfterPayClient.RefundOrder(AfterPayCreateRefundRequest, AfterPayCallContext)
  fullName: Yort.AfterPay.InStore.IAfterPayClient.RefundOrder(Yort.AfterPay.InStore.AfterPayCreateRefundRequest, Yort.AfterPay.InStore.AfterPayCallContext)
  type: Method
  source:
    id: RefundOrder
    path: ''
    startLine: 2229
  assemblies:
  - cs.temp.dll
  namespace: Yort.AfterPay.InStore
  summary: "\nCreates a refund against a previously created order.\n"
  example: []
  syntax:
    content: Task<AfterPayRefund> RefundOrder(AfterPayCreateRefundRequest request, AfterPayCallContext requestContext)
    parameters:
    - id: request
      type: Yort.AfterPay.InStore.AfterPayCreateRefundRequest
      description: A <xref href="Yort.AfterPay.InStore.AfterPayCreateRefundRequest" data-throw-if-not-resolved="false"></xref> containing details of the refund to create.
    - id: requestContext
      type: Yort.AfterPay.InStore.AfterPayCallContext
      description: A <xref href="Yort.AfterPay.InStore.AfterPayCallContext" data-throw-if-not-resolved="false"></xref> instance containing additional details required to make the request.
    return:
      type: Task{Yort.AfterPay.InStore.AfterPayRefund}
      description: An <xref href="Yort.AfterPay.InStore.AfterPayRefund" data-throw-if-not-resolved="false"></xref> containing details of the refund created within the AfterPay system.
    content.vb: Function RefundOrder(request As AfterPayCreateRefundRequest, requestContext As AfterPayCallContext) As Task(Of AfterPayRefund)
  overload: Yort.AfterPay.InStore.IAfterPayClient.RefundOrder*
  exceptions:
  - type: Yort.AfterPay.InStore.AfterPayApiException
    commentId: T:Yort.AfterPay.InStore.AfterPayApiException
    description: Thrown if the request is rejected by the AfterPay API.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or <code data-dev-comment-type="paramref" class="paramref">requestContext</code> is null.
- uid: Yort.AfterPay.InStore.IAfterPayClient.ReverseRefund(Yort.AfterPay.InStore.AfterPayReverseRefundRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  commentId: M:Yort.AfterPay.InStore.IAfterPayClient.ReverseRefund(Yort.AfterPay.InStore.AfterPayReverseRefundRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  id: ReverseRefund(Yort.AfterPay.InStore.AfterPayReverseRefundRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  parent: Yort.AfterPay.InStore.IAfterPayClient
  langs:
  - csharp
  - vb
  name: ReverseRefund(AfterPayReverseRefundRequest, AfterPayCallContext)
  nameWithType: IAfterPayClient.ReverseRefund(AfterPayReverseRefundRequest, AfterPayCallContext)
  fullName: Yort.AfterPay.InStore.IAfterPayClient.ReverseRefund(Yort.AfterPay.InStore.AfterPayReverseRefundRequest, Yort.AfterPay.InStore.AfterPayCallContext)
  type: Method
  source:
    id: ReverseRefund
    path: ''
    startLine: 2242
  assemblies:
  - cs.temp.dll
  namespace: Yort.AfterPay.InStore
  summary: "\nCreates a refund reversal against a previously created refund.\n"
  remarks: "\n<p>This method is intended to ensure a refuund is cancelled when it&apos;s status is/was unknown at the time the customer was present. For more information see https://docs.afterpay.com.au/instore-api-v1.html#refund-reversal </p>\n"
  example: []
  syntax:
    content: Task<AfterPayRefundReversal> ReverseRefund(AfterPayReverseRefundRequest request, AfterPayCallContext requestContext)
    parameters:
    - id: request
      type: Yort.AfterPay.InStore.AfterPayReverseRefundRequest
      description: A <xref href="Yort.AfterPay.InStore.AfterPayReverseRefundRequest" data-throw-if-not-resolved="false"></xref> containing details of the refund reversal to create.
    - id: requestContext
      type: Yort.AfterPay.InStore.AfterPayCallContext
      description: A <xref href="Yort.AfterPay.InStore.AfterPayCallContext" data-throw-if-not-resolved="false"></xref> instance containing additional details required to make the request.
    return:
      type: Task{Yort.AfterPay.InStore.AfterPayRefundReversal}
      description: An <xref href="Yort.AfterPay.InStore.AfterPayRefundReversal" data-throw-if-not-resolved="false"></xref> containing details of the refund reversal created within the AfterPay system.
    content.vb: Function ReverseRefund(request As AfterPayReverseRefundRequest, requestContext As AfterPayCallContext) As Task(Of AfterPayRefundReversal)
  overload: Yort.AfterPay.InStore.IAfterPayClient.ReverseRefund*
  exceptions:
  - type: Yort.AfterPay.InStore.AfterPayApiException
    commentId: T:Yort.AfterPay.InStore.AfterPayApiException
    description: Thrown if the request is rejected by the AfterPay API.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">request</code> or <code data-dev-comment-type="paramref" class="paramref">requestContext</code> is null.
references:
- uid: Yort.AfterPay.InStore.AfterPayClient
  commentId: T:Yort.AfterPay.InStore.AfterPayClient
  isExternal: false
  name: AfterPayClient
  nameWithType: AfterPayClient
  fullName: Yort.AfterPay.InStore.AfterPayClient
- uid: Yort.AfterPay.InStore
  commentId: N:Yort.AfterPay.InStore
  isExternal: false
  name: Yort.AfterPay.InStore
  nameWithType: Yort.AfterPay.InStore
  fullName: Yort.AfterPay.InStore
- uid: Yort.AfterPay.InStore.AfterPayDeviceRegistrationRequest
  commentId: T:Yort.AfterPay.InStore.AfterPayDeviceRegistrationRequest
  parent: Yort.AfterPay.InStore
  isExternal: false
  name: AfterPayDeviceRegistrationRequest
  nameWithType: AfterPayDeviceRegistrationRequest
  fullName: Yort.AfterPay.InStore.AfterPayDeviceRegistrationRequest
- uid: Yort.AfterPay.InStore.AfterPayDeviceRegistration
  commentId: T:Yort.AfterPay.InStore.AfterPayDeviceRegistration
  isExternal: false
  name: AfterPayDeviceRegistration
  nameWithType: AfterPayDeviceRegistration
  fullName: Yort.AfterPay.InStore.AfterPayDeviceRegistration
- uid: Yort.AfterPay.InStore.IAfterPayClient.RegisterDevice*
  commentId: Overload:Yort.AfterPay.InStore.IAfterPayClient.RegisterDevice
  isExternal: false
  name: RegisterDevice
  nameWithType: IAfterPayClient.RegisterDevice
  fullName: Yort.AfterPay.InStore.IAfterPayClient.RegisterDevice
- uid: Yort.AfterPay.InStore.AfterPayApiException
  commentId: T:Yort.AfterPay.InStore.AfterPayApiException
  isExternal: false
  name: AfterPayApiException
  nameWithType: AfterPayApiException
  fullName: Yort.AfterPay.InStore.AfterPayApiException
- uid: Task{Yort.AfterPay.InStore.AfterPayDeviceRegistration}
  commentId: '!:Task{Yort.AfterPay.InStore.AfterPayDeviceRegistration}'
  definition: Task`1
  name: Task<AfterPayDeviceRegistration>
  nameWithType: Task<AfterPayDeviceRegistration>
  fullName: Task<Yort.AfterPay.InStore.AfterPayDeviceRegistration>
  nameWithType.vb: Task(Of AfterPayDeviceRegistration)
  fullName.vb: Task(Of Yort.AfterPay.InStore.AfterPayDeviceRegistration)
  name.vb: Task(Of AfterPayDeviceRegistration)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.AfterPay.InStore.AfterPayDeviceRegistration
    name: AfterPayDeviceRegistration
    nameWithType: AfterPayDeviceRegistration
    fullName: Yort.AfterPay.InStore.AfterPayDeviceRegistration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.AfterPay.InStore.AfterPayDeviceRegistration
    name: AfterPayDeviceRegistration
    nameWithType: AfterPayDeviceRegistration
    fullName: Yort.AfterPay.InStore.AfterPayDeviceRegistration
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.AfterPay.InStore.IAfterPayClient.Ping*
  commentId: Overload:Yort.AfterPay.InStore.IAfterPayClient.Ping
  isExternal: false
  name: Ping
  nameWithType: IAfterPayClient.Ping
  fullName: Yort.AfterPay.InStore.IAfterPayClient.Ping
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Yort.AfterPay.InStore.AfterPayInviteRequest
  commentId: T:Yort.AfterPay.InStore.AfterPayInviteRequest
  parent: Yort.AfterPay.InStore
  isExternal: false
  name: AfterPayInviteRequest
  nameWithType: AfterPayInviteRequest
  fullName: Yort.AfterPay.InStore.AfterPayInviteRequest
- uid: Yort.AfterPay.InStore.AfterPayCallContext
  commentId: T:Yort.AfterPay.InStore.AfterPayCallContext
  parent: Yort.AfterPay.InStore
  isExternal: false
  name: AfterPayCallContext
  nameWithType: AfterPayCallContext
  fullName: Yort.AfterPay.InStore.AfterPayCallContext
- uid: Yort.AfterPay.InStore.IAfterPayClient.SendInvite*
  commentId: Overload:Yort.AfterPay.InStore.IAfterPayClient.SendInvite
  isExternal: false
  name: SendInvite
  nameWithType: IAfterPayClient.SendInvite
  fullName: Yort.AfterPay.InStore.IAfterPayClient.SendInvite
- uid: Yort.AfterPay.InStore.AfterPayPreapprovalRequest
  commentId: T:Yort.AfterPay.InStore.AfterPayPreapprovalRequest
  parent: Yort.AfterPay.InStore
  isExternal: false
  name: AfterPayPreapprovalRequest
  nameWithType: AfterPayPreapprovalRequest
  fullName: Yort.AfterPay.InStore.AfterPayPreapprovalRequest
- uid: Yort.AfterPay.InStore.AfterPayPreapprovalResponse
  commentId: T:Yort.AfterPay.InStore.AfterPayPreapprovalResponse
  isExternal: false
  name: AfterPayPreapprovalResponse
  nameWithType: AfterPayPreapprovalResponse
  fullName: Yort.AfterPay.InStore.AfterPayPreapprovalResponse
- uid: Yort.AfterPay.InStore.IAfterPayClient.PreapprovalEnquiry*
  commentId: Overload:Yort.AfterPay.InStore.IAfterPayClient.PreapprovalEnquiry
  isExternal: false
  name: PreapprovalEnquiry
  nameWithType: IAfterPayClient.PreapprovalEnquiry
  fullName: Yort.AfterPay.InStore.IAfterPayClient.PreapprovalEnquiry
- uid: Task{Yort.AfterPay.InStore.AfterPayPreapprovalResponse}
  commentId: '!:Task{Yort.AfterPay.InStore.AfterPayPreapprovalResponse}'
  definition: Task`1
  name: Task<AfterPayPreapprovalResponse>
  nameWithType: Task<AfterPayPreapprovalResponse>
  fullName: Task<Yort.AfterPay.InStore.AfterPayPreapprovalResponse>
  nameWithType.vb: Task(Of AfterPayPreapprovalResponse)
  fullName.vb: Task(Of Yort.AfterPay.InStore.AfterPayPreapprovalResponse)
  name.vb: Task(Of AfterPayPreapprovalResponse)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.AfterPay.InStore.AfterPayPreapprovalResponse
    name: AfterPayPreapprovalResponse
    nameWithType: AfterPayPreapprovalResponse
    fullName: Yort.AfterPay.InStore.AfterPayPreapprovalResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.AfterPay.InStore.AfterPayPreapprovalResponse
    name: AfterPayPreapprovalResponse
    nameWithType: AfterPayPreapprovalResponse
    fullName: Yort.AfterPay.InStore.AfterPayPreapprovalResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.AfterPay.InStore.AfterPayCreateOrderRequest
  commentId: T:Yort.AfterPay.InStore.AfterPayCreateOrderRequest
  parent: Yort.AfterPay.InStore
  isExternal: false
  name: AfterPayCreateOrderRequest
  nameWithType: AfterPayCreateOrderRequest
  fullName: Yort.AfterPay.InStore.AfterPayCreateOrderRequest
- uid: Yort.AfterPay.InStore.AfterPayOrder
  commentId: T:Yort.AfterPay.InStore.AfterPayOrder
  isExternal: false
  name: AfterPayOrder
  nameWithType: AfterPayOrder
  fullName: Yort.AfterPay.InStore.AfterPayOrder
- uid: Yort.AfterPay.InStore.IAfterPayClient.CreateOrder*
  commentId: Overload:Yort.AfterPay.InStore.IAfterPayClient.CreateOrder
  isExternal: false
  name: CreateOrder
  nameWithType: IAfterPayClient.CreateOrder
  fullName: Yort.AfterPay.InStore.IAfterPayClient.CreateOrder
- uid: Task{Yort.AfterPay.InStore.AfterPayOrder}
  commentId: '!:Task{Yort.AfterPay.InStore.AfterPayOrder}'
  definition: Task`1
  name: Task<AfterPayOrder>
  nameWithType: Task<AfterPayOrder>
  fullName: Task<Yort.AfterPay.InStore.AfterPayOrder>
  nameWithType.vb: Task(Of AfterPayOrder)
  fullName.vb: Task(Of Yort.AfterPay.InStore.AfterPayOrder)
  name.vb: Task(Of AfterPayOrder)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.AfterPay.InStore.AfterPayOrder
    name: AfterPayOrder
    nameWithType: AfterPayOrder
    fullName: Yort.AfterPay.InStore.AfterPayOrder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.AfterPay.InStore.AfterPayOrder
    name: AfterPayOrder
    nameWithType: AfterPayOrder
    fullName: Yort.AfterPay.InStore.AfterPayOrder
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.AfterPay.InStore.IAfterPayClient.RefundOrder(Yort.AfterPay.InStore.AfterPayCreateRefundRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  commentId: M:Yort.AfterPay.InStore.IAfterPayClient.RefundOrder(Yort.AfterPay.InStore.AfterPayCreateRefundRequest,Yort.AfterPay.InStore.AfterPayCallContext)
  parent: Yort.AfterPay.InStore.IAfterPayClient
  isExternal: false
  name: RefundOrder(AfterPayCreateRefundRequest, AfterPayCallContext)
  nameWithType: IAfterPayClient.RefundOrder(AfterPayCreateRefundRequest, AfterPayCallContext)
  fullName: Yort.AfterPay.InStore.IAfterPayClient.RefundOrder(Yort.AfterPay.InStore.AfterPayCreateRefundRequest, Yort.AfterPay.InStore.AfterPayCallContext)
  spec.csharp:
  - uid: Yort.AfterPay.InStore.IAfterPayClient.RefundOrder(Yort.AfterPay.InStore.AfterPayCreateRefundRequest,Yort.AfterPay.InStore.AfterPayCallContext)
    name: RefundOrder
    nameWithType: IAfterPayClient.RefundOrder
    fullName: Yort.AfterPay.InStore.IAfterPayClient.RefundOrder
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.AfterPay.InStore.AfterPayCreateRefundRequest
    name: AfterPayCreateRefundRequest
    nameWithType: AfterPayCreateRefundRequest
    fullName: Yort.AfterPay.InStore.AfterPayCreateRefundRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Yort.AfterPay.InStore.AfterPayCallContext
    name: AfterPayCallContext
    nameWithType: AfterPayCallContext
    fullName: Yort.AfterPay.InStore.AfterPayCallContext
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Yort.AfterPay.InStore.IAfterPayClient.RefundOrder(Yort.AfterPay.InStore.AfterPayCreateRefundRequest,Yort.AfterPay.InStore.AfterPayCallContext)
    name: RefundOrder
    nameWithType: IAfterPayClient.RefundOrder
    fullName: Yort.AfterPay.InStore.IAfterPayClient.RefundOrder
  - name: (
    nameWithType: (
    fullName: (
  - uid: Yort.AfterPay.InStore.AfterPayCreateRefundRequest
    name: AfterPayCreateRefundRequest
    nameWithType: AfterPayCreateRefundRequest
    fullName: Yort.AfterPay.InStore.AfterPayCreateRefundRequest
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Yort.AfterPay.InStore.AfterPayCallContext
    name: AfterPayCallContext
    nameWithType: AfterPayCallContext
    fullName: Yort.AfterPay.InStore.AfterPayCallContext
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.AfterPay.InStore.AfterPayReverseOrderRequest
  commentId: T:Yort.AfterPay.InStore.AfterPayReverseOrderRequest
  parent: Yort.AfterPay.InStore
  isExternal: false
  name: AfterPayReverseOrderRequest
  nameWithType: AfterPayReverseOrderRequest
  fullName: Yort.AfterPay.InStore.AfterPayReverseOrderRequest
- uid: Yort.AfterPay.InStore.AfterPayOrderReversal
  commentId: T:Yort.AfterPay.InStore.AfterPayOrderReversal
  isExternal: false
  name: AfterPayOrderReversal
  nameWithType: AfterPayOrderReversal
  fullName: Yort.AfterPay.InStore.AfterPayOrderReversal
- uid: Yort.AfterPay.InStore.IAfterPayClient.ReverseOrder*
  commentId: Overload:Yort.AfterPay.InStore.IAfterPayClient.ReverseOrder
  isExternal: false
  name: ReverseOrder
  nameWithType: IAfterPayClient.ReverseOrder
  fullName: Yort.AfterPay.InStore.IAfterPayClient.ReverseOrder
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Task{Yort.AfterPay.InStore.AfterPayOrderReversal}
  commentId: '!:Task{Yort.AfterPay.InStore.AfterPayOrderReversal}'
  definition: Task`1
  name: Task<AfterPayOrderReversal>
  nameWithType: Task<AfterPayOrderReversal>
  fullName: Task<Yort.AfterPay.InStore.AfterPayOrderReversal>
  nameWithType.vb: Task(Of AfterPayOrderReversal)
  fullName.vb: Task(Of Yort.AfterPay.InStore.AfterPayOrderReversal)
  name.vb: Task(Of AfterPayOrderReversal)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.AfterPay.InStore.AfterPayOrderReversal
    name: AfterPayOrderReversal
    nameWithType: AfterPayOrderReversal
    fullName: Yort.AfterPay.InStore.AfterPayOrderReversal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.AfterPay.InStore.AfterPayOrderReversal
    name: AfterPayOrderReversal
    nameWithType: AfterPayOrderReversal
    fullName: Yort.AfterPay.InStore.AfterPayOrderReversal
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.AfterPay.InStore.IAfterPayClient
  commentId: T:Yort.AfterPay.InStore.IAfterPayClient
  parent: Yort.AfterPay.InStore
  isExternal: false
  name: IAfterPayClient
  nameWithType: IAfterPayClient
  fullName: Yort.AfterPay.InStore.IAfterPayClient
- uid: Yort.AfterPay.InStore.AfterPayCreateRefundRequest
  commentId: T:Yort.AfterPay.InStore.AfterPayCreateRefundRequest
  parent: Yort.AfterPay.InStore
  isExternal: false
  name: AfterPayCreateRefundRequest
  nameWithType: AfterPayCreateRefundRequest
  fullName: Yort.AfterPay.InStore.AfterPayCreateRefundRequest
- uid: Yort.AfterPay.InStore.AfterPayRefund
  commentId: T:Yort.AfterPay.InStore.AfterPayRefund
  isExternal: false
  name: AfterPayRefund
  nameWithType: AfterPayRefund
  fullName: Yort.AfterPay.InStore.AfterPayRefund
- uid: Yort.AfterPay.InStore.IAfterPayClient.RefundOrder*
  commentId: Overload:Yort.AfterPay.InStore.IAfterPayClient.RefundOrder
  isExternal: false
  name: RefundOrder
  nameWithType: IAfterPayClient.RefundOrder
  fullName: Yort.AfterPay.InStore.IAfterPayClient.RefundOrder
- uid: Task{Yort.AfterPay.InStore.AfterPayRefund}
  commentId: '!:Task{Yort.AfterPay.InStore.AfterPayRefund}'
  definition: Task`1
  name: Task<AfterPayRefund>
  nameWithType: Task<AfterPayRefund>
  fullName: Task<Yort.AfterPay.InStore.AfterPayRefund>
  nameWithType.vb: Task(Of AfterPayRefund)
  fullName.vb: Task(Of Yort.AfterPay.InStore.AfterPayRefund)
  name.vb: Task(Of AfterPayRefund)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.AfterPay.InStore.AfterPayRefund
    name: AfterPayRefund
    nameWithType: AfterPayRefund
    fullName: Yort.AfterPay.InStore.AfterPayRefund
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.AfterPay.InStore.AfterPayRefund
    name: AfterPayRefund
    nameWithType: AfterPayRefund
    fullName: Yort.AfterPay.InStore.AfterPayRefund
  - name: )
    nameWithType: )
    fullName: )
- uid: Yort.AfterPay.InStore.AfterPayReverseRefundRequest
  commentId: T:Yort.AfterPay.InStore.AfterPayReverseRefundRequest
  parent: Yort.AfterPay.InStore
  isExternal: false
  name: AfterPayReverseRefundRequest
  nameWithType: AfterPayReverseRefundRequest
  fullName: Yort.AfterPay.InStore.AfterPayReverseRefundRequest
- uid: Yort.AfterPay.InStore.AfterPayRefundReversal
  commentId: T:Yort.AfterPay.InStore.AfterPayRefundReversal
  isExternal: false
  name: AfterPayRefundReversal
  nameWithType: AfterPayRefundReversal
  fullName: Yort.AfterPay.InStore.AfterPayRefundReversal
- uid: Yort.AfterPay.InStore.IAfterPayClient.ReverseRefund*
  commentId: Overload:Yort.AfterPay.InStore.IAfterPayClient.ReverseRefund
  isExternal: false
  name: ReverseRefund
  nameWithType: IAfterPayClient.ReverseRefund
  fullName: Yort.AfterPay.InStore.IAfterPayClient.ReverseRefund
- uid: Task{Yort.AfterPay.InStore.AfterPayRefundReversal}
  commentId: '!:Task{Yort.AfterPay.InStore.AfterPayRefundReversal}'
  definition: Task`1
  name: Task<AfterPayRefundReversal>
  nameWithType: Task<AfterPayRefundReversal>
  fullName: Task<Yort.AfterPay.InStore.AfterPayRefundReversal>
  nameWithType.vb: Task(Of AfterPayRefundReversal)
  fullName.vb: Task(Of Yort.AfterPay.InStore.AfterPayRefundReversal)
  name.vb: Task(Of AfterPayRefundReversal)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Yort.AfterPay.InStore.AfterPayRefundReversal
    name: AfterPayRefundReversal
    nameWithType: AfterPayRefundReversal
    fullName: Yort.AfterPay.InStore.AfterPayRefundReversal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Yort.AfterPay.InStore.AfterPayRefundReversal
    name: AfterPayRefundReversal
    nameWithType: AfterPayRefundReversal
    fullName: Yort.AfterPay.InStore.AfterPayRefundReversal
  - name: )
    nameWithType: )
    fullName: )
