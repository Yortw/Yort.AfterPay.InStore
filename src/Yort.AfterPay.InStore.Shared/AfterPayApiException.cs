using System;
using System.Collections.Generic;
using System.Text;

namespace Yort.AfterPay.InStore
{
	/// <summary>
	/// Represents an exception thrown due to an error response from the AfterPay API.
	/// </summary>
	[Serializable]
	public class AfterPayApiException : Exception
	{
		/// <summary>
		/// Default constructor, not recommended for use but supported due to framework requirements.
		/// </summary>
		public AfterPayApiException() { }
		/// <summary>
		/// Recommended constructor. Creates an exception from an <see cref="AfterPayApiError"/> response.
		/// </summary>
		/// <param name="error">An <see cref="AfterPayApiError"/> response used to populate the exception details.</param>
		public AfterPayApiException(AfterPayApiError error) : this(error, null) { }
		/// <summary>
		/// Recommended constructor. Creates an exception from an <see cref="AfterPayApiError"/> response.
		/// </summary>
		/// <param name="error">An <see cref="AfterPayApiError"/> response used to populate the exception details.</param>
		/// <param name="innerException">Another exception that is wrapped by this one.</param>
		public AfterPayApiException(AfterPayApiError error, Exception innerException) : this(error?.Message ?? error?.ErrorCode ?? String.Empty, innerException)
		{
			this.ErrorId = error?.ErrorId;
			this.ErrorCode = error?.ErrorCode;
			this.HttpStatusCode = error?.HttpStatusCode;
		}

		/// <summary>
		/// Partial contructor, not recommended for use but supported due to framework requirements.
		/// </summary>
		/// <param name="message">A custom error message to use.</param>
		public AfterPayApiException(string message) : base(message) { }
		/// <summary>
		/// Partial contructor, not recommended for use but supported due to framework requirements.
		/// </summary>
		/// <param name="message">A custom error message to use.</param>
		/// <param name="innerException">Another exception that is wrapped by this one.</param>
		public AfterPayApiException(string message, Exception innerException) : base(message, innerException) { }

		/// <summary>
		/// Constructor required to support deserialisation of the exception.
		/// </summary>
		/// <param name="info">A <see cref="System.Runtime.Serialization.SerializationInfo"/> used to read serialised information.</param>
		/// <param name="context">A <see cref="System.Runtime.Serialization.StreamingContext"/> used to read serialised information.</param>
		protected AfterPayApiException(
		System.Runtime.Serialization.SerializationInfo info,
		System.Runtime.Serialization.StreamingContext context) : base(info, context) { }
		
		/// <summary>
		/// Returns the unique error id generated by AfterPay related to this exception.
		/// </summary>
		/// <remarks>
		/// <para>This property may return null or empty string if no error id was provided. Null and empty string should both be treated as a missing value.</para>
		/// </remarks>
		public string ErrorId
		{
			get { return GetDataPropertyOrDefault(nameof(ErrorId), (string)null); }
			protected set
			{
				SetDataProperty(nameof(ErrorId), value);
			}
		}

		/// <summary>
		/// A static error code returned by the AfterPay API representing the error that occurred, can be useful for making programmatic decisions on how to handle an excpetion.
		/// </summary>
		/// <remarks>
		/// <para>This property may return null or empty string if no error code was provided. Null and empty string should both be treated as a missing value.</para>
		/// </remarks>
		public string ErrorCode
		{
			get { return GetDataPropertyOrDefault(nameof(ErrorCode), (string)null); }
			protected set
			{
				SetDataProperty(nameof(ErrorCode), value);
			}
		}

		/// <summary>
		/// An integer that represents the HTTP status code that was used in the response that generated this error.
		/// </summary>
		/// <remarks>
		/// <para>This property may return null if no status code was provided.</para>
		/// </remarks>
		public int? HttpStatusCode
		{
			get { return GetDataPropertyOrDefault<int?>(nameof(HttpStatusCode), null); }
			protected set
			{
				SetDataProperty<int?>(nameof(HttpStatusCode), value);
			}
		}
		
		private T GetDataPropertyOrDefault<T>(string key, T defaultValue )
		{
			if (this.Data.Contains(key))
				return (T)this.Data[key];

			return defaultValue;
		}

		private void SetDataProperty<T>(string key, T value)
		{
			this.Data[key] = value;
		}

	}
}