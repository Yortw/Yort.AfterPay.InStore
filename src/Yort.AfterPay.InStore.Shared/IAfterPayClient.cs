using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace Yort.AfterPay.InStore
{
	/// <summary>
	/// An interface for <see cref="AfterPayClient"/> to allow mocking the client for test purposes. 
	/// </summary>
	public interface IAfterPayClient
	{

		/// <summary>
		/// Performs one time registration of a new point of sale device (API client) with the AfterPay API.
		/// </summary>
		/// <param name="request">A <see cref="AfterPayDeviceRegistrationRequest"/> containing details of the device to register.</param>
		/// <returns>A <see cref="AfterPayDeviceRegistration"/> containing details returned by AfterPay for a successful registration.</returns>
		/// <exception cref="AfterPayApiException">Thrown if the request is rejected by the AfterPay API.</exception>
		Task<AfterPayDeviceRegistration> RegisterDevice(AfterPayDeviceRegistrationRequest request);

		/// <summary>
		/// Sends a ping request to the AfterPay API to confirm a connection can be made. If no exception is thrown the ping was successful.
		/// </summary>
		Task Ping();

		/// <summary>
		/// Sends an invitational SMS message to a customer's mobile phone. If no exception is thrown the invite was sent successfully.
		/// </summary>
		/// <param name="request">A <see cref="AfterPayInviteRequest"/> instance containing details of the invite to send.</param>
		/// <param name="requestContext">A <see cref="AfterPayCallContext"/> instance describing additional information for the request.</param>
		Task SendInvite(AfterPayInviteRequest request, AfterPayCallContext requestContext);

		/// <summary>
		/// Requests information about a pre-approval code generated by a customer.
		/// </summary>
		/// <param name="request">A <see cref="AfterPayPreapprovalRequest"/> containing details of the pre-approval code to enquire about.</param>
		/// <param name="requestContext">A <see cref="AfterPayCallContext"/> instance containing additional details required to make the request.</param>
		/// <returns>A <see cref="AfterPayPreapprovalResponse"/> instance containing information about the pre-approval code specified.</returns>
		Task<AfterPayPreapprovalResponse> PreapprovalEnquiry(AfterPayPreapprovalRequest request, AfterPayCallContext requestContext);

		/// <summary>
		/// Creates a new AfterPay order, which is basically a request for payment using a pre-approval code.
		/// </summary>
		/// <param name="request">A <see cref="AfterPayCreateOrderRequest"/> containing details of the order to be created.</param>
		/// <param name="requestContext">A <see cref="AfterPayCallContext"/> instance containing additional details required to make the request.</param>
		/// <returns>An <see cref="AfterPayOrder"/> created within the AfterPay system.</returns>
		Task<AfterPayOrder> CreateOrder(AfterPayCreateOrderRequest request, AfterPayCallContext requestContext);

		/// <summary>
		/// Requests an order previously placed be reversed.
		/// </summary>
		/// <remarks>
		/// <para>This method is intended to ensure an order is cancelled when it's status is/was unknown at the time the customer was present. It should not be used for refunds, see <see cref="RefundOrder"/>.</para>
		/// </remarks>
		/// <param name="request">A <see cref="AfterPayReverseOrderRequest"/> containing details of the order to be reversed.</param>
		/// <param name="requestContext">A <see cref="AfterPayCallContext"/> instance containing additional details required to make the request.</param>
		/// <returns>An <see cref="AfterPayOrderReversal"/> containing details of the reversed order within the AfterPay system.</returns>
		/// <exception cref="AfterPayApiException">Thrown if the request is rejected by the AfterPay API.</exception>
		/// <exception cref="System.ArgumentNullException">Thrown if <paramref name="request"/> or <paramref name="requestContext"/> is null.</exception>
		Task<AfterPayOrderReversal> ReverseOrder(AfterPayReverseOrderRequest request, AfterPayCallContext requestContext);

		/// <summary>
		/// Creates a refund against a previously created order.
		/// </summary>
		/// <param name="request">A <see cref="AfterPayCreateRefundRequest"/> containing details of the refund to create.</param>
		/// <param name="requestContext">A <see cref="AfterPayCallContext"/> instance containing additional details required to make the request.</param>
		/// <returns>An <see cref="AfterPayRefund"/> containing details of the refund created within the AfterPay system.</returns>
		/// <exception cref="AfterPayApiException">Thrown if the request is rejected by the AfterPay API.</exception>
		/// <exception cref="System.ArgumentNullException">Thrown if <paramref name="request"/> or <paramref name="requestContext"/> is null.</exception>
		Task<AfterPayRefund> RefundOrder(AfterPayCreateRefundRequest request, AfterPayCallContext requestContext);

		/// <summary>
		/// Creates a refund reversal against a previously created refund.
		/// </summary>
		/// <remarks>
		/// <para>This method is intended to ensure a refuund is cancelled when it's status is/was unknown at the time the customer was present. For more information see https://docs.afterpay.com.au/instore-api-v1.html#refund-reversal </para>
		/// </remarks>
		/// <param name="request">A <see cref="AfterPayReverseRefundRequest"/> containing details of the refund reversal to create.</param>
		/// <param name="requestContext">A <see cref="AfterPayCallContext"/> instance containing additional details required to make the request.</param>
		/// <returns>An <see cref="AfterPayRefundReversal"/> containing details of the refund reversal created within the AfterPay system.</returns>
		/// <exception cref="AfterPayApiException">Thrown if the request is rejected by the AfterPay API.</exception>
		/// <exception cref="System.ArgumentNullException">Thrown if <paramref name="request"/> or <paramref name="requestContext"/> is null.</exception>
		Task<AfterPayRefundReversal> ReverseRefund(AfterPayReverseRefundRequest request, AfterPayCallContext requestContext);

	}
}